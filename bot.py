import asyncio
import logging
import requests
import json
import time
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import config
import uuid
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=config.TELEGRAM_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
IMAGE_API_URL = "https://api.stability.ai/v2beta/stable-image/generate/sd3"
VIDEO_API_URL = "https://api.stability.ai/v2alpha/video/generate"
UPSCALE_API_URL = "https://api.stability.ai/v1/generation/esrgan-v1-x2plus/image-to-image/upscale"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
class GenerationStates(StatesGroup):
    waiting_for_prompt = State()
    waiting_for_image_prompt = State()
    waiting_for_video_prompt = State()
    waiting_for_style = State()
    waiting_for_upscale = State()

# –°—Ç–∏–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
STYLES = {
    "realistic": "–§–æ—Ç–æ—Ä–µ–∞–ª–∏–∑–º",
    "anime": "–ê–Ω–∏–º–µ",
    "digital_art": "–¶–∏—Ñ—Ä–æ–≤–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ",
    "comic_book": "–ö–æ–º–∏–∫—Å",
    "fantasy": "–§—ç–Ω—Ç–µ–∑–∏",
    "vector": "–í–µ–∫—Ç–æ—Ä–Ω–∞—è –≥—Ä–∞—Ñ–∏–∫–∞",
    "pixel_art": "–ü–∏–∫—Å–µ–ª—å-–∞—Ä—Ç",
    "isometric": "–ò–∑–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π"
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Stable Diffusion 3
async def generate_image(prompt: str, style: str = "realistic", aspect_ratio: str = "1:1") -> str:
    headers = {
        "Authorization": f"Bearer {config.STABILITY_API_KEY}",
        "Accept": "image/*"
    }
    
    data = {
        "prompt": prompt,
        "output_format": "png",
        "model": "sd3",
        "style_preset": style,
        "aspect_ratio": aspect_ratio
    }
    
    try:
        response = requests.post(
            IMAGE_API_URL,
            headers=headers,
            files={"none": ''},
            data=data,
            timeout=120
        )
        
        if response.status_code == 200:
            filename = f"results/{uuid.uuid4()}.png"
            with open(filename, 'wb') as f:
                f.write(response.content)
            return filename
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {response.status_code} - {response.text}")
            return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Stable Video Diffusion
async def generate_video(prompt: str, image_path: str) -> str:
    headers = {
        "Authorization": f"Bearer {config.STABILITY_API_KEY}"
    }
    
    # –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    with open(image_path, 'rb') as img_file:
        files = {'image': img_file}
        data = {
            "prompt": prompt,
            "seed": 0,
            "cfg_scale": 2.5,
            "motion_bucket_id": 127
        }
        
        try:
            response = requests.post(
                VIDEO_API_URL,
                headers=headers,
                files=files,
                data=data,
                timeout=300
            )
            
            if response.status_code == 200:
                response_data = response.json()
                video_id = response_data.get('id')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                while True:
                    status_response = requests.get(
                        f"{VIDEO_API_URL}/result/{video_id}",
                        headers=headers
                    )
                    
                    if status_response.status_code == 200:
                        status_data = status_response.json()
                        if status_data['status'] == 'complete':
                            video_url = status_data['video']
                            video_response = requests.get(video_url)
                            
                            filename = f"results/{uuid.uuid4()}.mp4"
                            with open(filename, 'wb') as f:
                                f.write(video_response.content)
                            return filename
                        elif status_data['status'] == 'failed':
                            logger.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ")
                            return None
                    
                    await asyncio.sleep(10)
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –≤–∏–¥–µ–æ API: {response.status_code} - {response.text}")
                return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∏–¥–µ–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return None

# –£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
async def upscale_image(image_path: str) -> str:
    headers = {
        "Authorization": f"Bearer {config.STABILITY_API_KEY}",
        "Accept": "image/png"
    }
    
    try:
        with open(image_path, 'rb') as img_file:
            files = {'image': img_file}
            data = {
                "width": 2048,
            }
            
            response = requests.post(
                UPSCALE_API_URL,
                headers=headers,
                files=files,
                data=data,
                timeout=120
            )
            
            if response.status_code == 200:
                filename = f"results/upscaled_{uuid.uuid4()}.png"
                with open(filename, 'wb') as f:
                    f.write(response.content)
                return filename
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è: {response.status_code} - {response.text}")
                return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è: {e}")
        return None

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    keyboard = InlineKeyboardMarkup(row_width=2)
    buttons = [
        InlineKeyboardButton("üñº –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="generate_image"),
        InlineKeyboardButton("üé• –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ", callback_data="generate_video"),
        InlineKeyboardButton("‚ú® –£–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ", callback_data="upscale_image"),
        InlineKeyboardButton("üé® –°—Ç–∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", callback_data="show_styles"),
        InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help_info")
    ]
    keyboard.add(*buttons)
    
    await message.answer(
        "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ArtGenius AI!\n\n"
        "–Ø –º–æ–≥—É —Å–æ–∑–¥–∞–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –≤–∏–¥–µ–æ –ø–æ –≤–∞—à–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π.\n\n"
        "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (Stable Diffusion 3)\n"
        "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é (Stable Video Diffusion)\n"
        "‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ 4K\n"
        "‚Ä¢ 8 —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç–∏–ª–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data == 'generate_image')
async def start_image_generation(callback_query: types.CallbackQuery):
    await bot.send_message(
        callback_query.from_user.id,
        "üé® –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ '–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –≤ —Å—Ç–∏–ª–µ –∫–∏–±–µ—Ä–ø–∞–Ω–∫, –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π'\n"
        "‚Ä¢ '–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –ø–æ—Ä—Ç—Ä–µ—Ç –∫–æ—Ç–∞ –≤ —à–ª—è–ø–µ, —Å—Ç–∏–ª—å –†–µ–Ω–µ—Å—Å–∞–Ω—Å'\n"
        "‚Ä¢ '–§—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –≥–æ—Ä–æ–¥ –ø–æ–¥ –¥–æ–∂–¥–µ–º, –Ω–µ–æ–Ω–æ–≤—ã–µ –æ–≥–Ω–∏, –Ω–æ—á—å'"
    )
    await GenerationStates.waiting_for_image_prompt.set()

@dp.callback_query_handler(lambda c: c.data == 'generate_video')
async def start_video_generation(callback_query: types.CallbackQuery):
    await bot.send_message(
        callback_query.from_user.id,
        "üìπ –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –µ–≥–æ.\n"
        "–ó–∞—Ç–µ–º –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏.\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ '–ú–µ–¥–ª–µ–Ω–Ω–æ –≤—Ä–∞—â–∞—é—â–∏–π—Å—è –≤–∏–¥' \n"
        "‚Ä¢ '–ü–æ–ª–µ—Ç —á–µ—Ä–µ–∑ –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å' \n"
        "‚Ä¢ '–ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ –ª–∏—Ü—É –∫–æ—Ç–∞'"
    )
    await GenerationStates.waiting_for_video_prompt.set()

@dp.callback_query_handler(lambda c: c.data == 'upscale_image')
async def start_upscale(callback_query: types.CallbackQuery):
    await bot.send_message(
        callback_query.from_user.id,
        "‚ú® –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ (–¥–æ 4K).\n"
        "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é ESRGAN."
    )
    await GenerationStates.waiting_for_upscale.set()

@dp.callback_query_handler(lambda c: c.data == 'show_styles')
async def show_styles(callback_query: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(row_width=2)
    for style_key, style_name in STYLES.items():
        keyboard.add(InlineKeyboardButton(style_name, callback_data=f"style_{style_key}"))
    
    await bot.send_message(
        callback_query.from_user.id,
        "üé≠ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:",
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data.startswith('style_'))
async def set_style(callback_query: types.CallbackQuery):
    style_key = callback_query.data.split('_')[1]
    style_name = STYLES.get(style_key, "–§–æ—Ç–æ—Ä–µ–∞–ª–∏–∑–º")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∏–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ - –≤ –ë–î)
    user_id = callback_query.from_user.id
    # user_styles[user_id] = style_key
    
    await bot.answer_callback_query(
        callback_query.id,
        f"‚úÖ –°—Ç–∏–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {style_name}"
    )

@dp.message_handler(state=GenerationStates.waiting_for_image_prompt)
async def process_image_prompt(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    prompt = message.text
    
    if len(prompt) < 10:
        await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    await message.answer(f"ü™Ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{prompt}'...")
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image_path = await generate_image(prompt, style="realistic")
    
    if image_path:
        with open(image_path, 'rb') as photo:
            await message.answer_photo(
                photo,
                caption=f"üñº –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{prompt}'\n\n"
                        f"‚ú® /upscale - –£–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ\n"
                        f"üé• /video - –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ"
            )
        os.remove(image_path)
    else:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
    
    await state.finish()

@dp.message_handler(content_types=types.ContentType.PHOTO, state=GenerationStates.waiting_for_upscale)
async def process_upscale_image(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    photo = message.photo[-1]
    file_id = photo.file_id
    file = await bot.get_file(file_id)
    file_url = file.file_path
    
    # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    response = requests.get(f"https://api.telegram.org/file/bot{config.TELEGRAM_TOKEN}/{file_url}")
    if response.status_code != 200:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        await state.finish()
        return
    
    original_path = f"results/original_{user_id}.jpg"
    with open(original_path, 'wb') as f:
        f.write(response.content)
    
    await message.answer("üîç –£–ª—É—á—à–∞—é –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
    
    # –£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞
    upscaled_path = await upscale_image(original_path)
    
    if upscaled_path:
        with open(upscaled_path, 'rb') as photo:
            await message.answer_photo(
                photo,
                caption="‚ú® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–æ –¥–æ 4K –∫–∞—á–µ—Å—Ç–≤–∞"
            )
        os.remove(upscaled_path)
    else:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    
    os.remove(original_path)
    await state.finish()

@dp.message_handler(state=GenerationStates.waiting_for_video_prompt)
async def process_video_prompt(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    prompt = message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    last_image = f"results/last_image_{user_id}.png"
    if not os.path.exists(last_image):
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏.")
        await state.finish()
        return
    
    if len(prompt) < 5:
        await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    await message.answer(f"üé¨ –°–æ–∑–¥–∞—é –≤–∏–¥–µ–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{prompt}'... –≠—Ç–æ –∑–∞–π–º–µ—Ç 2-5 –º–∏–Ω—É—Ç.")
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ
    video_path = await generate_video(prompt, last_image)
    
    if video_path:
        with open(video_path, 'rb') as video:
            await message.answer_video(
                video,
                caption=f"üé• –í–∏–¥–µ–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{prompt}'",
                supports_streaming=True
            )
        os.remove(video_path)
    else:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.")
    
    os.remove(last_image)
    await state.finish()

@dp.message_handler(content_types=types.ContentType.PHOTO)
async def handle_image_upload(message: types.Message):
    user_id = message.from_user.id
    photo = message.photo[-1]
    file_id = photo.file_id
    file = await bot.get_file(file_id)
    file_url = file.file_path
    
    # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    response = requests.get(f"https://api.telegram.org/file/bot{config.TELEGRAM_TOKEN}/{file_url}")
    if response.status_code != 200:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    image_path = f"results/last_image_{user_id}.png"
    with open(image_path, 'wb') as f:
        f.write(response.content)
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üé• –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ", callback_data="generate_video"))
    keyboard.add(InlineKeyboardButton("‚ú® –£–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ", callback_data="upscale_image"))
    
    await message.answer(
        "‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data == 'help_info')
async def show_help(callback_query: types.CallbackQuery):
    help_text = (
        "üÜò –ü–æ–º–æ—â—å –ø–æ ArtGenius AI\n\n"
        "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n"
        "1. –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:\n"
        "   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'\n"
        "   ‚Ä¢ –û–ø–∏—à–∏—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å\n"
        "   ‚Ä¢ –ü—Ä–∏–º–µ—Ä: '–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –ø–µ–π–∑–∞–∂ —Å –¥–≤—É–º—è –ª—É–Ω–∞–º–∏ –≤ —Å—Ç–∏–ª–µ –í–∞–Ω –ì–æ–≥–∞'\n\n"
        "2. –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ:\n"
        "   ‚Ä¢ –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
        "   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ'\n"
        "   ‚Ä¢ –û–ø–∏—à–∏—Ç–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –∏–ª–∏ –∞–Ω–∏–º–∞—Ü–∏—é\n"
        "   ‚Ä¢ –ü—Ä–∏–º–µ—Ä: '–ú–µ–¥–ª–µ–Ω–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ –≤–æ–∫—Ä—É–≥ –æ–±—ä–µ–∫—Ç–∞'\n\n"
        "3. –£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞:\n"
        "   ‚Ä¢ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
        "   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ '–£–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ'\n"
        "   ‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –≤–µ—Ä—Å–∏—é –≤ 4K –∫–∞—á–µ—Å—Ç–≤–µ\n\n"
        "4. –°—Ç–∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n"
        "   ‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ 8 —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç–∏–ª–µ–π\n"
        "   ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n\n"
        "‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:\n"
        "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ: 5 –º–∏–Ω—É—Ç\n"
        "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: 10MB\n"
        "‚Ä¢ –ó–∞–ø—Ä–µ—â–µ–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–µ–∑–∞–∫–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç\n\n"
        "üõ† –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:\n"
        "‚Ä¢ Stable Diffusion 3 (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)\n"
        "‚Ä¢ Stable Video Diffusion (–≤–∏–¥–µ–æ)\n"
        "‚Ä¢ ESRGAN (—É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞)"
    )
    
    await bot.send_message(callback_query.from_user.id, help_text)

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
if not os.path.exists('results'):
    os.makedirs('results')

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
